{"ast":null,"code":"import { all, call, put, takeEvery, takeLatest, delay } from 'redux-saga/effects';\n\nfunction* updateApi(data) {\n  while (true) {\n    try {\n      const data = yield call(() => {\n        return fetch('https://front-test.beta.aviasales.ru/tickets?searchId=5bsts').then(res => res.json());\n      });\n      return apiResponse;\n    } catch (error) {\n      yield put({\n        type: 'UPDATE_RETRY',\n        error\n      });\n      yield delay(2000);\n    }\n  }\n}\n\nfunction* updateResource({\n  data\n}) {\n  const apiResponse = yield call(updateApi, data);\n  yield put({\n    type: 'UPDATE_SUCCESS',\n    payload: apiResponse.body\n  });\n}\n\nexport function* watchUpdateResource() {\n  yield takeLatest('UPDATE_START', updateResource);\n}\nexport function* helloSaga() {\n  console.log('Hello Sagas!');\n  let x = new XMLHttpRequest();\n\n  const get = () => {\n    x.open(\"GET\", \"https://front-test.beta.aviasales.ru/search\", true);\n\n    x.onload = () => {\n      alert(x.responseText);\n    };\n\n    x.send(null);\n  };\n\n  yield call(get); // yield put({ type: 'DATA_FETCHED' });\n}\nexport function* watchSaga() {\n  yield takeEvery('DATA_FETCHED', helloSaga);\n}\nexport function* rootSaga() {\n  yield all([helloSaga(), watchSaga()]);\n}","map":{"version":3,"sources":["/Users/u18193107/Desktop/test-tasks/aviasales_frontend/src/rootSaga.js"],"names":["all","call","put","takeEvery","takeLatest","delay","updateApi","data","fetch","then","res","json","apiResponse","error","type","updateResource","payload","body","watchUpdateResource","helloSaga","console","log","x","XMLHttpRequest","get","open","onload","alert","responseText","send","watchSaga","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,EAAoCC,UAApC,EAAgDC,KAAhD,QAA6D,oBAA7D;;AAEA,UAAUC,SAAV,CAAoBC,IAApB,EAA0B;AACxB,SAAO,IAAP,EAAa;AACX,QAAI;AACF,YAAMA,IAAI,GAAG,MAAMN,IAAI,CAAC,MAAM;AAC5B,eAAOO,KAAK,CAAC,6DAAD,CAAL,CAAqEC,IAArE,CAA0EC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAjF,CAAP;AACC,OAFoB,CAAvB;AAIA,aAAOC,WAAP;AACD,KAND,CAME,OAAMC,KAAN,EAAa;AACb,YAAMX,GAAG,CAAC;AACRY,QAAAA,IAAI,EAAE,cADE;AAERD,QAAAA;AAFQ,OAAD,CAAT;AAIA,YAAMR,KAAK,CAAC,IAAD,CAAX;AACD;AACF;AACF;;AAED,UAAUU,cAAV,CAAyB;AAAER,EAAAA;AAAF,CAAzB,EAAmC;AACjC,QAAMK,WAAW,GAAG,MAAMX,IAAI,CAACK,SAAD,EAAYC,IAAZ,CAA9B;AACA,QAAML,GAAG,CAAC;AACRY,IAAAA,IAAI,EAAE,gBADE;AAERE,IAAAA,OAAO,EAAEJ,WAAW,CAACK;AAFb,GAAD,CAAT;AAID;;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACrC,QAAMd,UAAU,CAAC,cAAD,EAAiBW,cAAjB,CAAhB;AACD;AAED,OAAO,UAAUI,SAAV,GAAsB;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEA,MAAIC,CAAC,GAAG,IAAIC,cAAJ,EAAR;;AAEA,QAAMC,GAAG,GAAG,MAAM;AAChBF,IAAAA,CAAC,CAACG,IAAF,CAAO,KAAP,EAAc,6CAAd,EAA6D,IAA7D;;AACAH,IAAAA,CAAC,CAACI,MAAF,GAAW,MAAM;AACfC,MAAAA,KAAK,CAACL,CAAC,CAACM,YAAH,CAAL;AACD,KAFD;;AAGAN,IAAAA,CAAC,CAACO,IAAF,CAAO,IAAP;AACD,GAND;;AAQA,QAAM5B,IAAI,CAACuB,GAAD,CAAV,CAb2B,CAc3B;AACD;AAED,OAAO,UAAUM,SAAV,GAAsB;AAC3B,QAAM3B,SAAS,CAAC,cAAD,EAAiBgB,SAAjB,CAAf;AACD;AAED,OAAO,UAAUY,QAAV,GAAqB;AAC1B,QAAM/B,GAAG,CAAC,CACRmB,SAAS,EADD,EAERW,SAAS,EAFD,CAAD,CAAT;AAID","sourcesContent":["import { all, call, put, takeEvery, takeLatest, delay } from 'redux-saga/effects';\n\nfunction* updateApi(data) {\n  while (true) {\n    try {\n      const data = yield call(() => {\n        return fetch('https://front-test.beta.aviasales.ru/tickets?searchId=5bsts').then(res => res.json())\n        }\n      );\n      return apiResponse;\n    } catch(error) {\n      yield put({\n        type: 'UPDATE_RETRY',\n        error\n      })\n      yield delay(2000);\n    }\n  }\n}\n\nfunction* updateResource({ data }) {\n  const apiResponse = yield call(updateApi, data);\n  yield put({\n    type: 'UPDATE_SUCCESS',\n    payload: apiResponse.body,\n  });\n}\n\nexport function* watchUpdateResource() {\n  yield takeLatest('UPDATE_START', updateResource);\n}\n\nexport function* helloSaga() {\n  console.log('Hello Sagas!');\n\n  let x = new XMLHttpRequest();\n\n  const get = () => {\n    x.open(\"GET\", \"https://front-test.beta.aviasales.ru/search\", true);\n    x.onload = () => {\n      alert(x.responseText);\n    }\n    x.send(null);\n  }\n\n  yield call(get);\n  // yield put({ type: 'DATA_FETCHED' });\n}\n\nexport function* watchSaga() {\n  yield takeEvery('DATA_FETCHED', helloSaga)\n}\n\nexport function* rootSaga() {\n  yield all([\n    helloSaga(),\n    watchSaga()\n  ])\n}"]},"metadata":{},"sourceType":"module"}