{"ast":null,"code":"import { all, call, put, takeEvery, takeLatest, delay } from 'redux-saga/effects';\nimport { join } from './actions/tickets';\n\nfunction* updateToken() {\n  // while (true) {\n  try {\n    const _ref = yield call(() => {\n      return fetch('https://front-test.beta.aviasales.ru/search').then(res => res.json());\n    }),\n          searchId = _ref.searchId;\n\n    console.log(searchId);\n    return searchId;\n  } catch (error) {\n    yield delay(2000);\n  } // }\n\n}\n\nfunction* updateApi() {\n  // while (true) {\n  try {\n    const _ref2 = yield call(() => {\n      return fetch('https://front-test.beta.aviasales.ru/search').then(res => res.json());\n    }),\n          searchId = _ref2.searchId;\n\n    console.log(searchId);\n    const data = yield call(() => {\n      return fetch(`https://front-test.beta.aviasales.ru/tickets?searchId=${searchId}`).then(res => res.json());\n    });\n    return data;\n  } catch (error) {\n    yield delay(2000);\n  } // }\n\n}\n\nfunction* updateResource() {\n  const token = yield call(updateToken);\n\n  do {\n    var apiResponse = yield call(updateApi);\n    console.log(apiResponse.tickets);\n    yield put(join(apiResponse.tickets));\n  } while (!apiResponse.stop);\n}\n\nexport function* watchUpdateResource() {\n  yield takeLatest('UPDATE_START', updateResource);\n}\nexport function* rootSaga() {\n  yield all([updateResource()]);\n}","map":{"version":3,"sources":["/Users/u18193107/Desktop/test-tasks/aviasales_frontend/src/rootSaga.js"],"names":["all","call","put","takeEvery","takeLatest","delay","join","updateToken","fetch","then","res","json","searchId","console","log","error","updateApi","data","updateResource","token","apiResponse","tickets","stop","watchUpdateResource","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,EAAoCC,UAApC,EAAgDC,KAAhD,QAA6D,oBAA7D;AAEA,SAASC,IAAT,QAAqB,mBAArB;;AAEA,UAAUC,WAAV,GAAwB;AACtB;AACE,MAAI;AAAA,iBACmB,MAAMN,IAAI,CAAC,MAAM;AACpC,aAAOO,KAAK,CAAC,6CAAD,CAAL,CAAqDC,IAArD,CAA0DC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAjE,CAAP;AACD,KAF8B,CAD7B;AAAA,UACMC,QADN,QACMA,QADN;;AAIFC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAOA,QAAP;AACD,GAND,CAME,OAAMG,KAAN,EAAa;AACb,UAAMV,KAAK,CAAC,IAAD,CAAX;AACD,GAVmB,CAWtB;;AACD;;AAED,UAAUW,SAAV,GAAsB;AACpB;AACE,MAAI;AAAA,kBACmB,MAAMf,IAAI,CAAC,MAAM;AACpC,aAAOO,KAAK,CAAC,6CAAD,CAAL,CAAqDC,IAArD,CAA0DC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAjE,CAAP;AACD,KAF8B,CAD7B;AAAA,UACMC,QADN,SACMA,QADN;;AAIFC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,UAAMK,IAAI,GAAG,MAAMhB,IAAI,CAAC,MAAM;AAC5B,aAAOO,KAAK,CAAE,yDAAwDI,QAAS,EAAnE,CAAL,CAA2EH,IAA3E,CAAgFC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAvF,CAAP;AACC,KAFoB,CAAvB;AAIA,WAAOM,IAAP;AACD,GAVD,CAUE,OAAMF,KAAN,EAAa;AACb,UAAMV,KAAK,CAAC,IAAD,CAAX;AACD,GAdiB,CAepB;;AACD;;AAED,UAAUa,cAAV,GAA2B;AACzB,QAAMC,KAAK,GAAG,MAAMlB,IAAI,CAACM,WAAD,CAAxB;;AACA,KAAG;AACD,QAAIa,WAAW,GAAG,MAAMnB,IAAI,CAACe,SAAD,CAA5B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYM,WAAW,CAACC,OAAxB;AACA,UAAMnB,GAAG,CAACI,IAAI,CAACc,WAAW,CAACC,OAAb,CAAL,CAAT;AACD,GAJD,QAIS,CAACD,WAAW,CAACE,IAJtB;AAKD;;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACrC,QAAMnB,UAAU,CAAC,cAAD,EAAiBc,cAAjB,CAAhB;AACD;AAGD,OAAO,UAAUM,QAAV,GAAqB;AAC1B,QAAMxB,GAAG,CAAC,CACRkB,cAAc,EADN,CAAD,CAAT;AAGD","sourcesContent":["import { all, call, put, takeEvery, takeLatest, delay } from 'redux-saga/effects';\n\nimport { join } from './actions/tickets';\n\nfunction* updateToken() {\n  // while (true) {\n    try {\n      const { searchId } = yield call(() => {\n        return fetch('https://front-test.beta.aviasales.ru/search').then(res => res.json())\n      })\n      console.log(searchId);\n      return searchId;\n    } catch(error) {\n      yield delay(2000);\n    }\n  // }\n}\n\nfunction* updateApi() {\n  // while (true) {\n    try {\n      const { searchId } = yield call(() => {\n        return fetch('https://front-test.beta.aviasales.ru/search').then(res => res.json())\n      })\n      console.log(searchId);\n      const data = yield call(() => {\n        return fetch(`https://front-test.beta.aviasales.ru/tickets?searchId=${searchId}`).then(res => res.json())\n        }\n      );\n      return data;\n    } catch(error) {\n      yield delay(2000);\n    }\n  // }\n}\n\nfunction* updateResource() {\n  const token = yield call(updateToken)\n  do {\n    var apiResponse = yield call(updateApi);\n    console.log(apiResponse.tickets);\n    yield put(join(apiResponse.tickets));\n  } while (!apiResponse.stop);\n}\n\nexport function* watchUpdateResource() {\n  yield takeLatest('UPDATE_START', updateResource);\n}\n\n\nexport function* rootSaga() {\n  yield all([\n    updateResource()\n  ])\n}"]},"metadata":{},"sourceType":"module"}