{"ast":null,"code":"import _objectSpread from \"/Users/u18193107/Desktop/test-tasks/aviasales_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { all, call, put, takeEver } from 'redux-saga/effects';\nimport { useDispatch } from 'react-redux';\n\nfunction* poll(action) {\n  const params = _objectSpread({}, action.params);\n\n  const stats = {\n    isPolling: false,\n    fetching: false\n  };\n\n  while (true) {\n    // Start polling\n    stats.isPolling = true;\n\n    try {\n      // Make the API call\n      stats.fetching = true;\n      params.onStatsChange(stats);\n      const response = yield call(params.asyncFetch);\n      stats.fetching = false;\n      stats.nextPollEta = params.delay;\n      const shouldContinue = params.callback(response, stats); // API call was successful\n\n      if (shouldContinue) {\n        stats.retries = 0;\n        stats.lastResponseStatus = 'success';\n        params.onStatsChange(stats);\n      } else {\n        params.onStatsChange(stats);\n        throw new Error('Error while fetching data.');\n      }\n    } catch (e) {}\n  }\n}\n\nexport function* helloSaga() {\n  console.log('Hello Sagas!');\n  let x = new XMLHttpRequest();\n\n  const get = () => {\n    x.open(\"GET\", \"https://front-test.beta.aviasales.ru/search\", true);\n\n    x.onload = () => {\n      alert(x.responseText);\n      useDispatch({\n        type: 'DATA_FETCHED'\n      });\n    };\n\n    x.send(null);\n  };\n\n  yield call(get); // yield put({ type: 'DATA_FETCHED' });\n}\nexport function* watchSaga() {\n  yield takeEvery('DATA_FETCHED', helloSaga);\n}\nexport function* rootSaga() {\n  yield all([helloSaga(), watchSaga()]);\n}","map":{"version":3,"sources":["/Users/u18193107/Desktop/test-tasks/aviasales_frontend/src/rootSaga.js"],"names":["all","call","put","takeEver","useDispatch","poll","action","params","stats","isPolling","fetching","onStatsChange","response","asyncFetch","nextPollEta","delay","shouldContinue","callback","retries","lastResponseStatus","Error","e","helloSaga","console","log","x","XMLHttpRequest","get","open","onload","alert","responseText","type","send","watchSaga","takeEvery","rootSaga"],"mappings":";AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,QAAzB,QAAyC,oBAAzC;AACA,SAASC,WAAT,QAA2B,aAA3B;;AAEA,UAAUC,IAAV,CAAeC,MAAf,EAAuB;AACrB,QAAMC,MAAM,qBAAQD,MAAM,CAACC,MAAf,CAAZ;;AACA,QAAMC,KAAK,GAAG;AACVC,IAAAA,SAAS,EAAE,KADD;AAEVC,IAAAA,QAAQ,EAAE;AAFA,GAAd;;AAKA,SAAM,IAAN,EAAY;AACR;AACAF,IAAAA,KAAK,CAACC,SAAN,GAAkB,IAAlB;;AAEA,QAAI;AACA;AACAD,MAAAA,KAAK,CAACE,QAAN,GAAiB,IAAjB;AACAH,MAAAA,MAAM,CAACI,aAAP,CAAqBH,KAArB;AACA,YAAMI,QAAQ,GAAG,MAAMX,IAAI,CAACM,MAAM,CAACM,UAAR,CAA3B;AAEAL,MAAAA,KAAK,CAACE,QAAN,GAAiB,KAAjB;AACAF,MAAAA,KAAK,CAACM,WAAN,GAAoBP,MAAM,CAACQ,KAA3B;AACA,YAAMC,cAAc,GAAGT,MAAM,CAACU,QAAP,CAAgBL,QAAhB,EAA0BJ,KAA1B,CAAvB,CARA,CAUA;;AACA,UAAIQ,cAAJ,EAAoB;AAChBR,QAAAA,KAAK,CAACU,OAAN,GAAgB,CAAhB;AACAV,QAAAA,KAAK,CAACW,kBAAN,GAA2B,SAA3B;AACAZ,QAAAA,MAAM,CAACI,aAAP,CAAqBH,KAArB;AACH,OAJD,MAIO;AACHD,QAAAA,MAAM,CAACI,aAAP,CAAqBH,KAArB;AACA,cAAM,IAAIY,KAAJ,CAAU,4BAAV,CAAN;AACH;AACJ,KAnBD,CAmBE,OAAOC,CAAP,EAAU,CAEX;AACJ;AACF;;AAED,OAAO,UAAUC,SAAV,GAAsB;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEA,MAAIC,CAAC,GAAG,IAAIC,cAAJ,EAAR;;AAEA,QAAMC,GAAG,GAAG,MAAM;AAChBF,IAAAA,CAAC,CAACG,IAAF,CAAO,KAAP,EAAc,6CAAd,EAA6D,IAA7D;;AACAH,IAAAA,CAAC,CAACI,MAAF,GAAW,MAAM;AACfC,MAAAA,KAAK,CAACL,CAAC,CAACM,YAAH,CAAL;AACA3B,MAAAA,WAAW,CAAC;AAAE4B,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAX;AACD,KAHD;;AAIAP,IAAAA,CAAC,CAACQ,IAAF,CAAO,IAAP;AACD,GAPD;;AASA,QAAMhC,IAAI,CAAC0B,GAAD,CAAV,CAd2B,CAe3B;AACD;AAED,OAAO,UAAUO,SAAV,GAAsB;AAC3B,QAAMC,SAAS,CAAC,cAAD,EAAiBb,SAAjB,CAAf;AACD;AAED,OAAO,UAAUc,QAAV,GAAqB;AAC1B,QAAMpC,GAAG,CAAC,CACRsB,SAAS,EADD,EAERY,SAAS,EAFD,CAAD,CAAT;AAID","sourcesContent":["import { all, call, put, takeEver } from 'redux-saga/effects';\nimport { useDispatch} from 'react-redux';\n\nfunction* poll(action) {\n  const params = { ...action.params };\n  const stats = {\n      isPolling: false,\n      fetching: false,\n  };\n\n  while(true) {\n      // Start polling\n      stats.isPolling = true;\n\n      try {\n          // Make the API call\n          stats.fetching = true;\n          params.onStatsChange(stats);\n          const response = yield call(params.asyncFetch);\n\n          stats.fetching = false;\n          stats.nextPollEta = params.delay;\n          const shouldContinue = params.callback(response, stats);\n\n          // API call was successful\n          if (shouldContinue) {\n              stats.retries = 0;\n              stats.lastResponseStatus = 'success';\n              params.onStatsChange(stats);\n          } else {\n              params.onStatsChange(stats);\n              throw new Error('Error while fetching data.');\n          }\n      } catch (e) {\n          \n      }\n  }\n}\n\nexport function* helloSaga() {\n  console.log('Hello Sagas!');\n\n  let x = new XMLHttpRequest();\n\n  const get = () => {\n    x.open(\"GET\", \"https://front-test.beta.aviasales.ru/search\", true);\n    x.onload = () => {\n      alert(x.responseText);\n      useDispatch({ type: 'DATA_FETCHED' });\n    }\n    x.send(null);\n  }\n\n  yield call(get);\n  // yield put({ type: 'DATA_FETCHED' });\n}\n\nexport function* watchSaga() {\n  yield takeEvery('DATA_FETCHED', helloSaga)\n}\n\nexport function* rootSaga() {\n  yield all([\n    helloSaga(),\n    watchSaga()\n  ])\n}"]},"metadata":{},"sourceType":"module"}