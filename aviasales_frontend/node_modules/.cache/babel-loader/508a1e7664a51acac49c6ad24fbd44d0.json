{"ast":null,"code":"import _objectSpread from \"/Users/u18193107/Desktop/test-tasks/aviasales_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { useDispatch } from 'react-redux';\n\nfunction* poll(action) {\n  const params = _objectSpread({}, action.params);\n\n  const stats = {\n    isPolling: false,\n    fetching: false,\n    nextPollEta: null,\n    retries: null,\n    lastResponseStatus: null\n  };\n\n  while (true) {\n    // Start polling\n    stats.isPolling = true;\n\n    try {\n      // Make the API call\n      stats.fetching = true;\n      params.onStatsChange(stats);\n      const response = yield call(params.asyncFetch);\n      stats.fetching = false;\n      stats.nextPollEta = params.delay;\n      const shouldContinue = params.callback(response, stats); // API call was successful\n\n      if (shouldContinue) {\n        stats.retries = 0;\n        stats.lastResponseStatus = 'success';\n        params.onStatsChange(stats);\n      } else {\n        params.onStatsChange(stats);\n        throw new Error('Error while fetching data.');\n      }\n\n      for (let i = 1; i <= params.delay; ++i) {\n        yield call(delay, 1000);\n        stats.nextPollEta = params.delay - i;\n        params.onStatsChange(stats);\n      }\n    } catch (e) {\n      // API call was unsuccessful\n      console.log(e);\n      const shouldRetry = params.retryOnFailure && stats.retries < params.stopAfterRetries;\n      stats.fetching = false;\n      stats.lastResponseStatus = 'error';\n      stats.nextPollEta = shouldRetry ? params.retryAfter : null;\n      params.onStatsChange(stats);\n      params.callback(e, stats);\n\n      if (shouldRetry) {\n        // Update number of retries\n        for (let i = 1; i <= params.retryAfter; ++i) {\n          yield call(delay, 1000);\n          stats.nextPollEta = params.retryAfter - i;\n          params.onStatsChange(stats);\n        }\n\n        ++stats.retries;\n        yield put(startPolling(params));\n      } else {\n        stats.isPolling = false;\n        params.onStatsChange(stats);\n        yield put(stopPolling());\n      }\n    }\n  }\n}\n\nexport function* helloSaga() {\n  console.log('Hello Sagas!');\n  let x = new XMLHttpRequest();\n\n  const get = () => {\n    x.open(\"GET\", \"https://front-test.beta.aviasales.ru/search\", true);\n\n    x.onload = () => {\n      alert(x.responseText);\n      useDispatch({\n        type: 'DATA_FETCHED'\n      });\n    };\n\n    x.send(null);\n  };\n\n  yield call(get); // yield put({ type: 'DATA_FETCHED' });\n}\nexport function* watchSaga() {\n  yield takeEvery('DATA_FETCHED', helloSaga);\n}\nexport function* rootSaga() {\n  yield all([helloSaga(), watchSaga()]);\n}","map":{"version":3,"sources":["/Users/u18193107/Desktop/test-tasks/aviasales_frontend/src/rootSaga.js"],"names":["all","call","put","takeEvery","useDispatch","poll","action","params","stats","isPolling","fetching","nextPollEta","retries","lastResponseStatus","onStatsChange","response","asyncFetch","delay","shouldContinue","callback","Error","i","e","console","log","shouldRetry","retryOnFailure","stopAfterRetries","retryAfter","startPolling","stopPolling","helloSaga","x","XMLHttpRequest","get","open","onload","alert","responseText","type","send","watchSaga","rootSaga"],"mappings":"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","sourcesContent":["import { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { useDispatch} from 'react-redux';\n\nfunction* poll(action) {\n  const params = { ...action.params };\n  const stats = {\n      isPolling: false,\n      fetching: false,\n      nextPollEta: null,\n      retries: null,\n      lastResponseStatus: null\n  };\n\n  while(true) {\n      // Start polling\n      stats.isPolling = true;\n\n      try {\n          // Make the API call\n          stats.fetching = true;\n          params.onStatsChange(stats);\n          const response = yield call(params.asyncFetch);\n\n          stats.fetching = false;\n          stats.nextPollEta = params.delay;\n          const shouldContinue = params.callback(response, stats);\n\n          // API call was successful\n          if (shouldContinue) {\n              stats.retries = 0;\n              stats.lastResponseStatus = 'success';\n              params.onStatsChange(stats);\n          } else {\n              params.onStatsChange(stats);\n              throw new Error('Error while fetching data.');\n          }\n\n          for (let i = 1; i <= params.delay; ++i) {\n              yield call(delay, 1000);\n              stats.nextPollEta = params.delay - i;\n              params.onStatsChange(stats);\n          }\n      } catch (e) {\n          // API call was unsuccessful\n          console.log(e);\n          const shouldRetry = (\n              params.retryOnFailure &&\n              stats.retries < params.stopAfterRetries\n          );\n\n          stats.fetching = false;\n          stats.lastResponseStatus = 'error';\n          stats.nextPollEta = shouldRetry\n              ? params.retryAfter\n              : null;\n          params.onStatsChange(stats);\n          params.callback(e, stats);\n\n          if (shouldRetry) {\n              // Update number of retries\n              for (let i = 1; i <= params.retryAfter; ++i) {\n                  yield call(delay, 1000);\n                  stats.nextPollEta = params.retryAfter - i;\n                  params.onStatsChange(stats);\n              }\n\n              ++stats.retries;\n              yield put(startPolling(params));\n          } else {\n              stats.isPolling = false;\n              params.onStatsChange(stats);\n              yield put(stopPolling());\n          }\n      }\n  }\n}\n\nexport function* helloSaga() {\n  console.log('Hello Sagas!');\n\n  let x = new XMLHttpRequest();\n\n  const get = () => {\n    x.open(\"GET\", \"https://front-test.beta.aviasales.ru/search\", true);\n    x.onload = () => {\n      alert(x.responseText);\n      useDispatch({ type: 'DATA_FETCHED' });\n    }\n    x.send(null);\n  }\n\n  yield call(get);\n  // yield put({ type: 'DATA_FETCHED' });\n}\n\nexport function* watchSaga() {\n  yield takeEvery('DATA_FETCHED', helloSaga)\n}\n\nexport function* rootSaga() {\n  yield all([\n    helloSaga(),\n    watchSaga()\n  ])\n}"]},"metadata":{},"sourceType":"module"}